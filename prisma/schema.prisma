// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id        Int      @id @default(autoincrement())
  user_full_name String   @db.VarChar(255)
  user_email     String   @unique @db.VarChar(255)
  user_mobile    String   @db.VarChar(255)
  user_password  String   @db.VarChar(255)
  role_id        Int
  created_by     String?
  referred_by    String?
  status         Boolean  @default(true)
  is_verified    Boolean? @default(false)
  is_active      Boolean? @default(true)
  is_deleted     Boolean? @default(false)
  is_blocked     Boolean? @default(false)
  is_suspended   Boolean? @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user_role role        @relation(fields: [role_id], references: [role_id])
  t_profile t_profile[]
}

model role {
  role_id    Int      @id @default(autoincrement())
  role_name  String   @db.VarChar(255)
  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user user[]
}

model t_profile {
  tp_id                   Int      @id @default(autoincrement())
  tp_designation          String?  @db.VarChar(255)
  tp_location             String?  @db.VarChar(255)
  tp_total_experience     String?  @db.VarChar(255)
  tp_about                String?  @db.Text
  tp_professional_summary String?  @db.Text
  user_id                 Int
  tp_resume               String?  @db.VarChar(255)
  tp_image                String?  @db.VarChar(255)
  status                  Boolean  @default(true)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  user           user             @relation(fields: [user_id], references: [user_id])
  t_projects     t_projects[]
  t_experience   t_experience[]
  t_availability t_availability[]
  t_reviews      t_reviews[]
  t_skills       t_skills[]
}

model t_projects {
  tpj_id           Int     @id @default(autoincrement())
  tp_id            Int
  tpj_name         String? @db.VarChar(255)
  tpj_description  String? @db.Text
  tpj_url          String? @db.VarChar(255)
  tpj_github_url   String? @db.VarChar(255)
  tpj_duration     String? @db.VarChar(255)
  tpj_impact       String? @db.Text
  tpj_technologies String? @db.VarChar(255)
  tpj_images       String? @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tp_profile t_profile @relation(fields: [tp_id], references: [tp_id])
}

model t_experience {
  te_id           Int       @id @default(autoincrement())
  tp_id           Int
  te_company_name String?   @db.VarChar(255)
  te_designation  String?   @db.VarChar(255)
  te_location     String?   @db.VarChar(255)
  te_start_date   DateTime?
  te_end_date     DateTime?
  te_description  String?   @db.Text
  te_technologies String?   @db.VarChar(255)
  status          Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  tp_profile t_profile @relation(fields: [tp_id], references: [tp_id])
}

model t_availability {
  ta_id                    Int     @id @default(autoincrement())
  tp_id                    Int
  ta_full_time             Boolean @default(false)
  ta_full_min_salary       Int?
  ta_full_max_salary       Int?
  ta_part_time             Boolean @default(false)
  ta_part_min_salary       Int?
  ta_part_max_salary       Int?
  ta_consulting            Boolean @default(false)
  ta_consulting_min_salary Int?
  ta_consulting_max_salary Int?

  ta_work_location ta_work_location_types? @default(Remote)
  ta_timezone      ta_timezone_types?      @default(UTC)

  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  tp_profile t_profile @relation(fields: [tp_id], references: [tp_id])
}

model t_reviews {
  tr_id     Int     @id @default(autoincrement())
  tp_id     Int
  tr_rating Int
  tr_review String? @db.Text

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  tp_profile t_profile @relation(fields: [tp_id], references: [tp_id])
}

model t_skills {
  ts_id      Int      @id @default(autoincrement())
  tp_id      Int
  ts_skill   String?  @db.VarChar(255)
  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

  tp_profile t_profile @relation(fields: [tp_id], references: [tp_id])
}

enum ta_work_location_types {
  Onsite
  Remote
  Hybrid
  Flexible
}

enum ta_timezone_types {
  UTC
  GMT
  EST
  PST
  CST
  MST
  IST
}
